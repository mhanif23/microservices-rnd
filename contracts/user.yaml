openapi: 3.0.3
info:
  title: user-svc API
  version: 1.0.0
paths:
  /health:
    get:
      responses:
        '200':
          description: ok
  /users:
    post:
      summary: create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, name]
              properties:
                email: { type: string, format: email }
                name: { type: string }
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
  /users/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ok
        '404': { $ref: '#/components/responses/NotFound' }
  /users/{id}/eligibility:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: string, format: uuid }
                  can_borrow: { type: boolean }
                  max_books: { type: integer }
        '404': { $ref: '#/components/responses/NotFound' }
components:
  schemas:
    User:
      type: object
      required: [id, email, name, membership_status]
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        name: { type: string }
        membership_status: { type: string, enum: [ACTIVE, SUSPENDED] }
  responses:
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string }
        message: { type: string }
        details: { type: object }
