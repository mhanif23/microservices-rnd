openapi: 3.0.3
info:
  title: book-svc API
  version: 1.0.0
paths:
  /health:
    get: { responses: { '200': { description: ok } } }
  /books:
    get:
      parameters:
        - in: query
          name: query
          schema: { type: string }
      responses:
        '200':
          description: ok
          content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Book' } } } }
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BookInput' }
      responses:
        '201':
          description: created
          content: { application/json: { schema: { $ref: '#/components/schemas/Book' } } }
  /books/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: ok, content: { application/json: { schema: { $ref: '#/components/schemas/Book' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
  /books/isbn/{isbn}:
    get:
      parameters:
        - in: path
          name: isbn
          required: true
          schema: { type: string }
      responses:
        '200': { description: ok, content: { application/json: { schema: { $ref: '#/components/schemas/Book' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
components:
  schemas:
    BookInput:
      type: object
      required: [title]
      properties:
        title: { type: string }
        authors: { type: array, items: { type: string } }
        isbn: { type: string }
        categories: { type: array, items: { type: string } }
        tags: { type: array, items: { type: string } }
        language: { type: string }
        edition: { type: integer }
        media: { type: object, properties: { coverUrl: { type: string } } }
    Book:
      allOf:
        - $ref: '#/components/schemas/BookInput'
        - type: object
          required: [_id]
          properties:
            _id: { type: string, format: uuid }
  responses:
    NotFound:
      description: not found
      content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
  schemas:
    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string }
        message: { type: string }
        details: { type: object }
